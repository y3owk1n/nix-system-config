return {
	-- "nvimtools/none-ls.nvim", -- configure formatters & linters
	-- lazy = true,
	-- -- event = { "BufReadPre", "BufNewFile" }, -- to enable uncomment this
	-- dependencies = {
	-- 	"jay-babu/mason-null-ls.nvim",
	-- },
	-- config = function()
	-- 	local mason_null_ls = require("mason-null-ls")
	--
	-- 	local null_ls = require("null-ls")
	--
	-- 	local null_ls_utils = require("null-ls.utils")
	--
	-- 	mason_null_ls.setup({
	-- 		ensure_installed = {
	-- 			"prettierd", -- prettier formatter
	-- 			"stylua", -- lua formatter
	-- 			"eslint_d", -- js linter
	-- 		},
	-- 	})
	--
	-- 	-- for conciseness
	-- 	local formatting = null_ls.builtins.formatting -- to setup formatters
	-- 	local diagnostics = null_ls.builtins.diagnostics -- to setup linters
	-- 	local code_actions = null_ls.builtins.code_actions -- to setup code actions
	-- 	local completions = null_ls.builtins.completions -- to setup code actions
	--
	-- 	-- to setup format on save
	-- 	local augroup = vim.api.nvim_create_augroup("LspFormatting", {})
	--
	-- 	local function has_eslint(utils)
	-- 		return utils.root_has_file({
	-- 			".eslintrc.js",
	-- 			".eslintrc.cjs",
	-- 			".eslintrc.yaml",
	-- 			".eslintrc.yml",
	-- 			".eslintrc.json",
	-- 		})
	-- 	end
	--
	-- 	local function has_prettier(utils)
	-- 		return utils.root_has_file({
	-- 			".prettierrc",
	-- 			".prettierrc.json",
	-- 			".prettierrc.yml",
	-- 			".prettierrc.yaml",
	-- 			".prettierrc.json5",
	-- 			".prettierrc.js",
	-- 			".prettierrc.config.js",
	-- 			".prettierrc.mjs",
	-- 			".prettierrc.config.mjs",
	-- 			".prettierrc.cjs",
	-- 			".prettierrc.config.cjs",
	-- 			".prettierrc.toml",
	-- 		})
	-- 	end
	--
	-- 	local function has_biome(utils)
	-- 		return utils.root_has_file({
	-- 			"biome.json",
	-- 		})
	-- 	end
	--
	-- 	-- configure null_ls
	-- 	null_ls.setup({
	-- 		-- add package.json as identifier for root (for typescript monorepos)
	-- 		root_dir = null_ls_utils.root_pattern(
	-- 			".null-ls-root",
	-- 			"Makefile",
	-- 			".git",
	-- 			"package.json"
	-- 		),
	-- 		-- setup formatters & linters
	-- 		sources = {
	-- 			code_actions.eslint_d.with({
	-- 				condition = function(utils)
	-- 					return has_eslint(utils) -- only enable if root has eslintrc
	-- 				end,
	-- 			}),
	-- 			code_actions.shellcheck,
	--
	-- 			completions.luasnip,
	--
	-- 			diagnostics.codespell,
	-- 			diagnostics.eslint_d.with({ -- js/ts linter
	-- 				condition = function(utils)
	-- 					return has_eslint(utils) -- only enable if root has eslint
	-- 				end,
	-- 			}),
	-- 			diagnostics.fish,
	-- 			diagnostics.jsonlint,
	-- 			diagnostics.luacheck,
	-- 			diagnostics.markdownlint,
	-- 			diagnostics.shellcheck,
	-- 			diagnostics.yamllint,
	--
	-- 			formatting.beautysh,
	-- 			formatting.biome.with({
	-- 				condition = function(utils)
	-- 					return has_biome(utils) -- only enable if root has biome
	-- 				end,
	-- 			}),
	-- 			formatting.fish_indent,
	-- 			formatting.markdownlint,
	-- 			formatting.nixfmt,
	-- 			formatting.prismaFmt,
	-- 			--  to disable file types use
	-- 			--  "formatting.prettier.with({disabled_filetypes: {}})" (see null-ls docs)
	-- 			formatting.prettierd.with({
	-- 				extra_filetypes = { "svelte" },
	-- 				condition = function(utils)
	-- 					return has_prettier(utils) -- only enable if root has prettierrc
	-- 				end,
	-- 			}), -- js/ts formatter
	-- 			formatting.stylua, -- lua formatter
	-- 			formatting.yamlfmt,
	-- 		},
	-- 		-- configure format on save
	-- 		on_attach = function(current_client, bufnr)
	-- 			if
	-- 				current_client.supports_method("textDocument/formatting")
	-- 			then
	-- 				vim.api.nvim_clear_autocmds({
	-- 					group = augroup,
	-- 					buffer = bufnr,
	-- 				})
	-- 				vim.api.nvim_create_autocmd("BufWritePre", {
	-- 					group = augroup,
	-- 					buffer = bufnr,
	-- 					callback = function()
	-- 						vim.lsp.buf.format({
	-- 							filter = function(client)
	-- 								--  only use null-ls for formatting instead of lsp server
	-- 								return client.name == "null-ls"
	-- 							end,
	-- 							bufnr = bufnr,
	-- 						})
	-- 					end,
	-- 				})
	-- 			end
	-- 		end,
	-- 	})
	-- end,
}
